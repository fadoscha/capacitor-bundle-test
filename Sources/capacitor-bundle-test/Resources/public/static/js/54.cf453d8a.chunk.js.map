{"version":3,"sources":["../../../src/web.ts"],"names":[],"mappings":"kRAgBA,SAAS,IACL,IAAI,EACJ,OAAO,UAAU,YACjB,OAAO,UAAU,eACjB,OAAO,UAAU,iBACf,EAAyB,UACvB,EAAO,EAAa,EAAW,MAAQ,EAAW,cAAgB,KACtE,GAAE,GAAwB,kBAAT,EACb,OAAI,GAEA,IAAD,YACC,IAAD,WAgBL,IAAK,UACL,IAAK,KACC,IAAD,KACH,EAAS,WACD,MAjBJ,IAAD,OACK,EAAC,OACT,MACI,IAAD,WACC,IAAD,OACC,IAAD,QAaC,IAAD,KACH,EAAS,OACT,MAZF,IAAK,QACL,IAAK,UACH,EAAS,UAeb,OAAK,EAGT,IAAa,EAAb,YAAE,qBAAF,iBACI,SAAF,IAAI,IAAJ,EAAI,4BACE,EAAJ,cAyBM,aAAe,WACrB,IAEM,EAA2B,CAC/B,WAAW,EACX,eAJqB,KAOvB,EAAK,gBAAgB,sBAAuB,IAGtC,gBAAgB,WAMtB,EAAK,gBAAgB,sBALY,CAC/B,WAAW,EACX,eAAgB,UAtCI,qBAAX,SACT,OAAO,iBAAiB,SAAU,EAAK,cACvC,OAAO,iBAAiB,UAAW,EAAK,gBAJ5C,EADA,uBAAE,IAAJ,YAAI,MAAJ,WAAM,IAAN,wBASE,2FACO,OAAO,UADd,sBAEU,KAAK,YACT,wDAHN,cAOQ,EAAY,OAAO,UAAU,OAC7B,EAAiB,IAEjB,EAA2B,CAC/B,YACA,eAAgB,EAAY,EAAiB,QAZjD,kBAeS,GAfT,gDATI,kBAAE,OAAR,kC,KAAgC,GAgD1B,EAAU,IAAI","file":"static/js/54.cf453d8a.chunk.js","sourcesContent":["import { WebPlugin } from '@capacitor/core';\nfunction translatedConnection() {\n    const connection = window.navigator.connection ||\n        window.navigator.mozConnection ||\n        window.navigator.webkitConnection;\n    let result = 'unknown';\n    const type = connection ? connection.type || connection.effectiveType : null;\n    if (type && typeof type === 'string') {\n        switch (type) {\n            // possible type values\n            case 'bluetooth':\n            case 'cellular':\n                result = 'cellular';\n                break;\n            case 'none':\n                result = 'none';\n                break;\n            case 'ethernet':\n            case 'wifi':\n            case 'wimax':\n                result = 'wifi';\n                break;\n            case 'other':\n            case 'unknown':\n                result = 'unknown';\n                break;\n            // possible effectiveType values\n            case 'slow-2g':\n            case '2g':\n            case '3g':\n                result = 'cellular';\n                break;\n            case '4g':\n                result = 'wifi';\n                break;\n            default:\n                break;\n        }\n    }\n    return result;\n}\nexport class NetworkWeb extends WebPlugin {\n    constructor() {\n        super();\n        this.handleOnline = () => {\n            const connectionType = translatedConnection();\n            const status = {\n                connected: true,\n                connectionType: connectionType,\n            };\n            this.notifyListeners('networkStatusChange', status);\n        };\n        this.handleOffline = () => {\n            const status = {\n                connected: false,\n                connectionType: 'none',\n            };\n            this.notifyListeners('networkStatusChange', status);\n        };\n        if (typeof window !== 'undefined') {\n            window.addEventListener('online', this.handleOnline);\n            window.addEventListener('offline', this.handleOffline);\n        }\n    }\n    async getStatus() {\n        if (!window.navigator) {\n            throw this.unavailable('Browser does not support the Network Information API');\n        }\n        const connected = window.navigator.onLine;\n        const connectionType = translatedConnection();\n        const status = {\n            connected,\n            connectionType: connected ? connectionType : 'none',\n        };\n        return status;\n    }\n}\nconst Network = new NetworkWeb();\nexport { Network };\n//# sourceMappingURL=web.js.map"],"sourceRoot":""}